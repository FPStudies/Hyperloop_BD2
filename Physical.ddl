-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2020-01-21 03:07:26 CET
--   site:      Oracle Database 12cR2
--   type:      Oracle Database 12cR2



CREATE TABLE airlock (
    id                              VARCHAR2(6) NOT NULL,
    status                          VARCHAR2(30) NOT NULL,
    "Avg_(de)pressurization_time"   DATE,
    platform_name                   VARCHAR2(63) NOT NULL,
    station_id                      INTEGER NOT NULL,
    maintenance_date                DATE NOT NULL
)
LOGGING;

CREATE INDEX airlock_stat__idx ON
    airlock (
        status
    ASC )
        LOGGING;

CREATE INDEX airlock_station__idx ON
    airlock (
        station_id
    ASC )
        LOGGING;

CREATE INDEX airlock_platform__idx ON
    airlock (
        platform_name
    ASC )
        LOGGING;

ALTER TABLE airlock
    ADD CONSTRAINT airlock_ck_status CHECK ( status = 'Broken'
                                             OR status = 'Working'
                                             OR status = 'Decomissioned'
                                             OR status = 'In maintanance'
                                             OR status = 'In production'
                                             OR status = 'In transit' );

ALTER TABLE airlock ADD CONSTRAINT airlock_pk PRIMARY KEY ( id );

CREATE TABLE battery (
    id                 VARCHAR2(10) NOT NULL,
    status             VARCHAR2(30) NOT NULL,
    charge             FLOAT(4),
    capacity           FLOAT(6) NOT NULL,
    capacity_unit      VARCHAR2(10) NOT NULL,
    maintenance_date   DATE NOT NULL,
    energy_grid_id     VARCHAR2(10),
    serial_number      VARCHAR2(50) NOT NULL,
    producent_id       VARCHAR2(50) NOT NULL
)
LOGGING;

CREATE INDEX battery_status__idx ON
    battery (
        status
    ASC )
        LOGGING;

CREATE INDEX battery_eg_id__idx ON
    battery (
        energy_grid_id
    ASC )
        LOGGING;

CREATE INDEX battery_s_nr__idx ON
    battery (
        serial_number
    ASC )
        LOGGING;

CREATE INDEX battery_prod_id__idx ON
    battery (
        producent_id
    ASC )
        LOGGING;

ALTER TABLE battery
    ADD CONSTRAINT battery_ck_status CHECK ( status = 'Broken'
                                             OR status = 'Working'
                                             OR status = 'Decomissioned'
                                             OR status = 'In maintanance'
                                             OR status = 'In production'
                                             OR status = 'In transit' );

ALTER TABLE battery
    ADD CONSTRAINT battery_ck_charge CHECK ( charge >= 0
                                             AND charge <= 100 );

ALTER TABLE battery
    ADD CONSTRAINT battery_ck_cap_u CHECK ( capacity_unit = 'Wh'
                                            OR capacity_unit = 'kWh'
                                            OR capacity_unit = 'Ah'
                                            OR capacity_unit = 'kAh' );

ALTER TABLE battery ADD CONSTRAINT battery_pk PRIMARY KEY ( id );

CREATE TABLE damper (
    id                 VARCHAR2(6) NOT NULL,
    status             VARCHAR2(30) NOT NULL,
    maintenance_date   DATE NOT NULL,
    serial_number      VARCHAR2(50) NOT NULL,
    producent_id       VARCHAR2(50) NOT NULL
)
LOGGING;

CREATE INDEX damper_stat__idx ON
    damper (
        status
    ASC )
        LOGGING;

CREATE INDEX damper_s_nr__idx ON
    damper (
        serial_number
    ASC )
        LOGGING;

CREATE INDEX damper_prod_id__idx ON
    damper (
        producent_id
    ASC )
        LOGGING;

ALTER TABLE damper
    ADD CONSTRAINT damper_ck_status CHECK ( status = 'Broken'
                                            OR status = 'Working'
                                            OR status = 'Decomissioned'
                                            OR status = 'In maintanance'
                                            OR status = 'In production'
                                            OR status = 'In transit' );

ALTER TABLE damper ADD CONSTRAINT damper_pk PRIMARY KEY ( id );

CREATE TABLE element_data (
    serial_number   VARCHAR2(50) NOT NULL,
    producent_id    VARCHAR2(50) NOT NULL,
    model_name      VARCHAR2(50) NOT NULL
)
LOGGING;

CREATE INDEX element_producent__idx ON
    element_data (
        producent_id
    ASC )
        LOGGING;

ALTER TABLE element_data ADD CONSTRAINT producent_serial_number_pk PRIMARY KEY ( serial_number,
                                                                                 producent_id );

CREATE TABLE energy_grid (
    "EG-ID" VARCHAR2(10) NOT NULL
)
LOGGING;

ALTER TABLE energy_grid ADD CONSTRAINT energy_grid_pk PRIMARY KEY ( "EG-ID" );

CREATE TABLE linear_electric_motor (
    id                 VARCHAR2(10) NOT NULL,
    status             VARCHAR2(30) NOT NULL,
    energy_grid_id     VARCHAR2(10),
    maintenance_date   DATE NOT NULL,
    serial_number      VARCHAR2(50) NOT NULL,
    producent_id       VARCHAR2(50) NOT NULL
)
LOGGING;

CREATE INDEX motor_stat__idx ON
    linear_electric_motor (
        status
    ASC )
        LOGGING;

CREATE INDEX motor_eg_id__idx ON
    linear_electric_motor (
        energy_grid_id
    ASC )
        LOGGING;

CREATE INDEX motor_s_nr__idx ON
    linear_electric_motor (
        serial_number
    ASC )
        LOGGING;

CREATE INDEX motor_prod_id__idx ON
    linear_electric_motor (
        producent_id
    ASC )
        LOGGING;

ALTER TABLE linear_electric_motor
    ADD CONSTRAINT motor_ck_status CHECK ( status = 'Broken'
                                           OR status = 'Working'
                                           OR status = 'Decomissioned'
                                           OR status = 'In maintanance'
                                           OR status = 'In production'
                                           OR status = 'In transit' );

ALTER TABLE linear_electric_motor ADD CONSTRAINT linear_electric_motor_pk PRIMARY KEY ( id );

CREATE TABLE logs (
    "E-ID"    VARCHAR2(31) NOT NULL,
    id_type   INTEGER NOT NULL,
    "Date"    DATE NOT NULL,
    data      VARCHAR2(2047) NOT NULL
)
LOGGING;

CREATE INDEX logs_type__idx ON
    logs (
        id_type
    ASC )
        LOGGING;

CREATE INDEX logs_date__idxv1 ON
    logs (
        "Date"
    ASC )
        LOGGING;

CREATE INDEX logs_type_date__idx ON
    logs (
        id_type
    ASC,
        "Date"
    ASC )
        LOGGING;

ALTER TABLE logs ADD CONSTRAINT logs_pk PRIMARY KEY ( "E-ID" );

CREATE TABLE measurment_unit (
    unit VARCHAR2(10) NOT NULL
)
LOGGING;

ALTER TABLE measurment_unit ADD CONSTRAINT measurment_unit_pk PRIMARY KEY ( unit );

CREATE TABLE platform (
    platform_name   VARCHAR2(63) NOT NULL,
    status          VARCHAR2(30) NOT NULL,
    station_id      INTEGER NOT NULL
)
LOGGING;

CREATE INDEX platform_stat__idx ON
    platform (
        status
    ASC )
        LOGGING;

CREATE INDEX platform_stacion__idx ON
    platform (
        station_id
    ASC )
        LOGGING;

ALTER TABLE platform
    ADD CONSTRAINT platform_ck_status CHECK ( status = 'In planning'
                                              OR status = 'Open'
                                              OR status = 'Closed' );

ALTER TABLE platform ADD CONSTRAINT platform_pk PRIMARY KEY ( platform_name,
                                                              station_id );

CREATE TABLE producent_data (
    id             VARCHAR2(50) NOT NULL,
    name           VARCHAR2(50) NOT NULL,
    country        VARCHAR2(50) NOT NULL,
    localization   VARCHAR2(50) NOT NULL,
    "Index"        VARCHAR2(20) NOT NULL
)
LOGGING;

ALTER TABLE producent_data ADD CONSTRAINT producent_data_pk PRIMARY KEY ( id );

CREATE TABLE pylon (
    id                 INTEGER NOT NULL,
    length             FLOAT(4) NOT NULL,
    length_unit        VARCHAR2(10) NOT NULL,
    status             VARCHAR2(30) NOT NULL,
    maintenance_date   DATE NOT NULL,
    tube_segment_id    VARCHAR2(10) NOT NULL,
    damper_id          VARCHAR2(6 CHAR) NOT NULL
)
LOGGING;

CREATE UNIQUE INDEX pylon_damper__idx ON
    pylon (
        damper_id
    ASC )
        LOGGING;

CREATE INDEX pylon_stat__idx ON
    pylon (
        status
    ASC )
        LOGGING;

CREATE INDEX pylon_tube__idx ON
    pylon (
        tube_segment_id
    ASC )
        LOGGING;

ALTER TABLE pylon
    ADD CONSTRAINT pylon_ck_status CHECK ( status = 'Broken'
                                           OR status = 'Working'
                                           OR status = 'Decomissioned'
                                           OR status = 'In maintanance'
                                           OR status = 'In production'
                                           OR status = 'In transit' );

ALTER TABLE pylon
    ADD CONSTRAINT pylon_ck_len_u CHECK ( length_unit = 'lea'
                                          OR length_unit = 'mi'
                                          OR length_unit = 'fur'
                                          OR length_unit = 'ch'
                                          OR length_unit = 'yd'
                                          OR length_unit = 'ft'
                                          OR length_unit = 'in'
                                          OR length_unit = 'km'
                                          OR length_unit = 'm'
                                          OR length_unit = 'cm' );

ALTER TABLE pylon ADD CONSTRAINT pylon_pk PRIMARY KEY ( id );

CREATE TABLE route_section (
    id                  VARCHAR2(10) NOT NULL,
    status              VARCHAR2(30) NOT NULL,
    expected_duration   DATE NOT NULL,
    length              INTEGER NOT NULL,
    length_unit         VARCHAR2(10) NOT NULL,
    "Start"             INTEGER NOT NULL,
    end                 INTEGER NOT NULL
)
LOGGING;

CREATE UNIQUE INDEX route_sec__idx ON
    route_section (
        id
    ASC )
        LOGGING;

CREATE INDEX route_sec_stat__idx ON
    route_section (
        status
    ASC )
        LOGGING;

CREATE INDEX route_sec_start__idx ON
    route_section (
        "Start"
    ASC )
        LOGGING;

CREATE INDEX route_sec_end__idx ON
    route_section (
        end
    ASC )
        LOGGING;

ALTER TABLE route_section
    ADD CONSTRAINT route_section_ck_status CHECK ( status = 'In planning'
                                                   OR status = 'Open'
                                                   OR status = 'Closed' );

ALTER TABLE route_section
    ADD CONSTRAINT route_section_ck_len_u CHECK ( length_unit = 'lea'
                                                  OR length_unit = 'mi'
                                                  OR length_unit = 'fur'
                                                  OR length_unit = 'ch'
                                                  OR length_unit = 'yd'
                                                  OR length_unit = 'ft'
                                                  OR length_unit = 'in'
                                                  OR length_unit = 'km'
                                                  OR length_unit = 'm'
                                                  OR length_unit = 'cm' );

ALTER TABLE route_section ADD CONSTRAINT route_section_ck_dur CHECK ( expected_duration > 0 );

ALTER TABLE route_section ADD CONSTRAINT route_section_ck_len CHECK ( length > 0 );

ALTER TABLE route_section ADD CONSTRAINT route_section_ck_direction CHECK ( start != end );

ALTER TABLE route_section ADD CONSTRAINT route_pk PRIMARY KEY ( id );

CREATE TABLE solar_panel (
    id                 VARCHAR2(10) NOT NULL,
    status             VARCHAR2(30) NOT NULL,
    avg_output         FLOAT(6),
    output_unit        VARCHAR2(10) NOT NULL,
    maintenance_date   DATE NOT NULL,
    serial_number      VARCHAR2(50) NOT NULL,
    producent_id       VARCHAR2(50) NOT NULL,
    tube_segment_id    VARCHAR2(10),
    energy_grid_id     VARCHAR2(10)
)
LOGGING;

CREATE INDEX solar_pane_statl__idx ON
    solar_panel (
        status
    ASC )
        LOGGING;

CREATE INDEX solar_panel_s_nr__idx ON
    solar_panel (
        serial_number
    ASC )
        LOGGING;

CREATE INDEX solar_panel_prod_id__idx ON
    solar_panel (
        producent_id
    ASC )
        LOGGING;

CREATE INDEX solar_panel_tub_id__idx ON
    solar_panel (
        tube_segment_id
    ASC )
        LOGGING;

CREATE INDEX solar_panel_eg_id__idx ON
    solar_panel (
        energy_grid_id
    ASC )
        LOGGING;

ALTER TABLE solar_panel
    ADD CONSTRAINT solar_panel_ck_status CHECK ( status = 'Broken'
                                                 OR status = 'Working'
                                                 OR status = 'Decomissioned'
                                                 OR status = 'In maintanance'
                                                 OR status = 'In production'
                                                 OR status = 'In transit' );

ALTER TABLE solar_panel
    ADD CONSTRAINT solar_panel_ck_output_u CHECK ( output_unit = 'W'
                                                   OR output_unit = 'kW' );

ALTER TABLE solar_panel ADD CONSTRAINT solar_panel_pk PRIMARY KEY ( id );

CREATE TABLE station (
    id             INTEGER NOT NULL,
    status         VARCHAR2(30) NOT NULL,
    station_name   VARCHAR2(63) NOT NULL
)
LOGGING;

CREATE INDEX station_stat__idx ON
    station (
        status
    ASC )
        LOGGING;

ALTER TABLE station
    ADD CONSTRAINT station_ck_status CHECK ( status = 'In planning'
                                             OR status = 'Open'
                                             OR status = 'Closed' );

ALTER TABLE station ADD CONSTRAINT station_pk PRIMARY KEY ( id );

CREATE TABLE status (
    status VARCHAR2(30) NOT NULL
)
LOGGING;

ALTER TABLE status ADD CONSTRAINT status_pk PRIMARY KEY ( status );

CREATE TABLE terrain_type (
    type VARCHAR2(30) NOT NULL
)
LOGGING;

ALTER TABLE terrain_type ADD CONSTRAINT terrain_type_pk PRIMARY KEY ( type );

CREATE TABLE tube_on_route (
    id                VARCHAR2(10) NOT NULL,
    route_id          VARCHAR2(10) NOT NULL,
    tube_segment_id   VARCHAR2(10) NOT NULL
)
LOGGING;

CREATE INDEX tube_on_route_route__idx ON
    tube_on_route (
        route_id
    ASC )
        LOGGING;

CREATE INDEX tube_on_route_tube__idx ON
    tube_on_route (
        tube_segment_id
    ASC )
        LOGGING;

ALTER TABLE tube_on_route ADD CONSTRAINT tube_on_route_pk PRIMARY KEY ( route_id,
                                                                        id );

CREATE TABLE tube_segment (
    "TS-ID"                    VARCHAR2(10) NOT NULL,
    status                     VARCHAR2(30) NOT NULL,
    location                   mdsys.sdo_geometry NOT NULL,
    emergency_exit             NUMBER NOT NULL,
    altitude                   NUMBER,
    altitude_unit              VARCHAR2(10) NOT NULL,
    chainage                   NUMBER,
    chainage_unit              VARCHAR2(10) NOT NULL,
    linear_electric_motor_id   VARCHAR2(10),
    avg_pressure               FLOAT(6),
    pressure_unit              VARCHAR2(10) NOT NULL,
    serial_number              VARCHAR2(50) NOT NULL,
    producent_id               VARCHAR2(50) NOT NULL,
    tube_type                  VARCHAR2(30) NOT NULL,
    terrain_type               VARCHAR2(30) NOT NULL
)
LOGGING;

CREATE INDEX tube_segment_stat__idx ON
    tube_segment (
        status
    ASC )
        LOGGING;

CREATE INDEX tube_segment_motor__idx ON
    tube_segment (
        linear_electric_motor_id
    ASC )
        LOGGING;

CREATE INDEX tube_segment_s_nr__idx ON
    tube_segment (
        serial_number
    ASC )
        LOGGING;

CREATE INDEX tube_segment_prod_id__idx ON
    tube_segment (
        producent_id
    ASC )
        LOGGING;

CREATE INDEX tube_segment_type__idx ON
    tube_segment (
        tube_type
    ASC )
        LOGGING;

CREATE INDEX tube_segment_terr__idx ON
    tube_segment (
        terrain_type
    ASC )
        LOGGING;

ALTER TABLE tube_segment
    ADD CONSTRAINT tube_segment_ck_status CHECK ( status = 'Broken'
                                                  OR status = 'Working'
                                                  OR status = 'Decomissioned'
                                                  OR status = 'In maintanance'
                                                  OR status = 'In production'
                                                  OR status = 'In transit' );

ALTER TABLE tube_segment
    ADD CONSTRAINT tube_segment_ck_exit_bool CHECK ( emergency_exit = 0
                                                     OR emergency_exit = 1 );

ALTER TABLE tube_segment ADD constraint tube_segment_ck_alt_u CHECK ( altitude_unit = 'cm'
                                                                      OR altitude_unit = 'm'
                                                                      OR altitude_unit = 'km'
                                                                      OR altitude_unit = 'in'
                                                                      OR altitude_unit = 'ft'
                                                                      OR altitude_unit = 'yd'
                                                                      OR altitude_unit = 'ch'
                                                                      OR altitude_unit = 'fur'
                                                                      OR altitude_unit = 'mi' orAltitude_Unit='lea' )
;


ALTER TABLE Tube_Segment 
    ADD CONSTRAINT Tube_Segment_CK_Chain_U 
    CHECK (Chainage_Unit='m' or Chainage_Unit='km' or Chainage_Unit='lea' or Chainage_Unit='mi' or Chainage_Unit='fur' Chainage_Unit='ch' or Chainage_Unit='yd')
;


ALTER TABLE Tube_Segment 
    ADD CONSTRAINT Tube_Segment_CK_Press_U 
    CHECK (Pressure_Unit='torr' orPressure_Unit='atm' orPressure_Unit='hPa' orpressure_unit = 'Pa' );
ALTER TABLE tube_segment ADD CONSTRAINT tube_segment_pk PRIMARY KEY ( "TS-ID" );

CREATE TABLE tube_type (
    type VARCHAR2(30) NOT NULL
)
LOGGING;

ALTER TABLE tube_type ADD CONSTRAINT tube_type_pk PRIMARY KEY ( type );

CREATE TABLE vacuum_pump (
    id                 VARCHAR2(10) NOT NULL,
    status             VARCHAR2(30) NOT NULL,
    power              FLOAT(6),
    power_unit         VARCHAR2(10) NOT NULL,
    target_pressure    FLOAT(6),
    pressure_unit      VARCHAR2(10) NOT NULL,
    tube_segment_id    VARCHAR2(10),
    maintenance_date   DATE NOT NULL,
    serial_number      VARCHAR2(50) NOT NULL,
    producent_id       VARCHAR2(50) NOT NULL
)
LOGGING;

CREATE INDEX vacuum_pump_stat__idx ON
    vacuum_pump (
        status
    ASC )
        LOGGING;

CREATE INDEX vacuum_pump_tube__idx ON
    vacuum_pump (
        tube_segment_id
    ASC )
        LOGGING;

CREATE INDEX vacuum_pump_s_nr__idx ON
    vacuum_pump (
        serial_number
    ASC )
        LOGGING;

CREATE INDEX vacuum_pump_prod_id__idx ON
    vacuum_pump (
        producent_id
    ASC )
        LOGGING;

ALTER TABLE vacuum_pump
    ADD CONSTRAINT vacuum_pump_ck_status CHECK ( status = 'Broken'
                                                 OR status = 'Working'
                                                 OR status = 'Decomissioned'
                                                 OR status = 'In maintanance'
                                                 OR status = 'In production'
                                                 OR status = 'In transit' );

ALTER TABLE vacuum_pump
    ADD CONSTRAINT vacuum_pump_ck_pow_u CHECK ( power_unit = 'W'
                                                OR power_unit = 'kW' );

ALTER TABLE vacuum_pump
    ADD CONSTRAINT vacuum_pump_ck_pres_u CHECK ( pressure_unit = 'Pa'
                                                 OR pressure_unit = 'hPa'
                                                 OR pressure_unit = 'atm'
                                                 OR pressure_unit = 'torr' );

ALTER TABLE vacuum_pump ADD CONSTRAINT vacuum_pump_pk PRIMARY KEY ( id );

ALTER TABLE airlock
    ADD CONSTRAINT airlock_platform_fk FOREIGN KEY ( platform_name,
                                                     station_id )
        REFERENCES platform ( platform_name,
                              station_id )
    NOT DEFERRABLE;

ALTER TABLE airlock
    ADD CONSTRAINT airlock_status_fk FOREIGN KEY ( status )
        REFERENCES status ( status )
    NOT DEFERRABLE;

ALTER TABLE tube_segment
    ADD CONSTRAINT altitude_unit FOREIGN KEY ( altitude_unit )
        REFERENCES measurment_unit ( unit )
    NOT DEFERRABLE;

ALTER TABLE battery
    ADD CONSTRAINT battery_element_data_fk FOREIGN KEY ( serial_number,
                                                         producent_id )
        REFERENCES element_data ( serial_number,
                                  producent_id )
    NOT DEFERRABLE;

ALTER TABLE battery
    ADD CONSTRAINT battery_energy_grid_fk FOREIGN KEY ( energy_grid_id )
        REFERENCES energy_grid ( "EG-ID" )
    NOT DEFERRABLE;

ALTER TABLE battery
    ADD CONSTRAINT battery_measurment_unit_fk FOREIGN KEY ( capacity_unit )
        REFERENCES measurment_unit ( unit )
    NOT DEFERRABLE;

ALTER TABLE tube_segment
    ADD CONSTRAINT chainage_unit FOREIGN KEY ( chainage_unit )
        REFERENCES measurment_unit ( unit )
    NOT DEFERRABLE;

ALTER TABLE damper
    ADD CONSTRAINT damper_element_data_fk FOREIGN KEY ( serial_number,
                                                        producent_id )
        REFERENCES element_data ( serial_number,
                                  producent_id )
    NOT DEFERRABLE;

ALTER TABLE damper
    ADD CONSTRAINT damper_status_fk FOREIGN KEY ( status )
        REFERENCES status ( status )
    NOT DEFERRABLE;

ALTER TABLE route_section
    ADD CONSTRAINT end FOREIGN KEY ( end )
        REFERENCES station ( id )
    NOT DEFERRABLE;

ALTER TABLE linear_electric_motor
    ADD CONSTRAINT motor_element_data_fk FOREIGN KEY ( serial_number,
                                                       producent_id )
        REFERENCES element_data ( serial_number,
                                  producent_id )
    NOT DEFERRABLE;

ALTER TABLE linear_electric_motor
    ADD CONSTRAINT motor_energy_grid_fk FOREIGN KEY ( energy_grid_id )
        REFERENCES energy_grid ( "EG-ID" )
    NOT DEFERRABLE;

ALTER TABLE linear_electric_motor
    ADD CONSTRAINT motor_status_fk FOREIGN KEY ( status )
        REFERENCES status ( status )
    NOT DEFERRABLE;

ALTER TABLE platform
    ADD CONSTRAINT platform_station_fk FOREIGN KEY ( station_id )
        REFERENCES station ( id )
    NOT DEFERRABLE;

ALTER TABLE platform
    ADD CONSTRAINT platform_status_fk FOREIGN KEY ( status )
        REFERENCES status ( status )
    NOT DEFERRABLE;

ALTER TABLE vacuum_pump
    ADD CONSTRAINT power_unit FOREIGN KEY ( power_unit )
        REFERENCES measurment_unit ( unit )
    NOT DEFERRABLE;

ALTER TABLE vacuum_pump
    ADD CONSTRAINT pressure_unit FOREIGN KEY ( pressure_unit )
        REFERENCES measurment_unit ( unit )
    NOT DEFERRABLE;

ALTER TABLE tube_segment
    ADD CONSTRAINT pressure_unitv2 FOREIGN KEY ( pressure_unit )
        REFERENCES measurment_unit ( unit )
    NOT DEFERRABLE;

ALTER TABLE element_data
    ADD CONSTRAINT producent_id_serial_number_fk FOREIGN KEY ( producent_id )
        REFERENCES producent_data ( id )
    NOT DEFERRABLE;

ALTER TABLE pylon
    ADD CONSTRAINT pylon_damper_fk FOREIGN KEY ( damper_id )
        REFERENCES damper ( id )
    NOT DEFERRABLE;

ALTER TABLE pylon
    ADD CONSTRAINT pylon_measurment_unit_fk FOREIGN KEY ( length_unit )
        REFERENCES measurment_unit ( unit )
    NOT DEFERRABLE;

ALTER TABLE pylon
    ADD CONSTRAINT pylon_status_fk FOREIGN KEY ( status )
        REFERENCES status ( status )
    NOT DEFERRABLE;

ALTER TABLE pylon
    ADD CONSTRAINT pylon_tube_segment_fk FOREIGN KEY ( tube_segment_id )
        REFERENCES tube_segment ( "TS-ID" )
    NOT DEFERRABLE;

ALTER TABLE route_section
    ADD CONSTRAINT route_measurment_unit_fk FOREIGN KEY ( length_unit )
        REFERENCES measurment_unit ( unit )
    NOT DEFERRABLE;

ALTER TABLE route_section
    ADD CONSTRAINT route_section_status_fk FOREIGN KEY ( status )
        REFERENCES status ( status )
    NOT DEFERRABLE;

ALTER TABLE solar_panel
    ADD CONSTRAINT solar_panel_element_data_fk FOREIGN KEY ( serial_number,
                                                             producent_id )
        REFERENCES element_data ( serial_number,
                                  producent_id )
    NOT DEFERRABLE;

ALTER TABLE solar_panel
    ADD CONSTRAINT solar_panel_energy_grid_fk FOREIGN KEY ( energy_grid_id )
        REFERENCES energy_grid ( "EG-ID" )
    NOT DEFERRABLE;

ALTER TABLE solar_panel
    ADD CONSTRAINT solar_panel_measurment_unit_fk FOREIGN KEY ( output_unit )
        REFERENCES measurment_unit ( unit )
    NOT DEFERRABLE;

ALTER TABLE solar_panel
    ADD CONSTRAINT solar_panel_status_fk FOREIGN KEY ( status )
        REFERENCES status ( status )
    NOT DEFERRABLE;

ALTER TABLE solar_panel
    ADD CONSTRAINT solar_panel_tube_segment_fk FOREIGN KEY ( tube_segment_id )
        REFERENCES tube_segment ( "TS-ID" )
    NOT DEFERRABLE;

ALTER TABLE route_section
    ADD CONSTRAINT "Start" FOREIGN KEY ( "Start" )
        REFERENCES station ( id )
    NOT DEFERRABLE;

ALTER TABLE station
    ADD CONSTRAINT station_status_fk FOREIGN KEY ( status )
        REFERENCES status ( status )
    NOT DEFERRABLE;

ALTER TABLE battery
    ADD CONSTRAINT status FOREIGN KEY ( status )
        REFERENCES status ( status )
    NOT DEFERRABLE;

ALTER TABLE tube_on_route
    ADD CONSTRAINT tube_on_route_route_fk FOREIGN KEY ( route_id )
        REFERENCES route_section ( id )
    NOT DEFERRABLE;

ALTER TABLE tube_on_route
    ADD CONSTRAINT tube_on_route_tube_segment_fk FOREIGN KEY ( tube_segment_id )
        REFERENCES tube_segment ( "TS-ID" )
    NOT DEFERRABLE;

ALTER TABLE tube_segment
    ADD CONSTRAINT tube_segment_element_data_fk FOREIGN KEY ( serial_number,
                                                              producent_id )
        REFERENCES element_data ( serial_number,
                                  producent_id )
    NOT DEFERRABLE;

ALTER TABLE tube_segment
    ADD CONSTRAINT tube_segment_motor_fk FOREIGN KEY ( linear_electric_motor_id )
        REFERENCES linear_electric_motor ( id )
    NOT DEFERRABLE;

ALTER TABLE tube_segment
    ADD CONSTRAINT tube_segment_status_fk FOREIGN KEY ( status )
        REFERENCES status ( status )
    NOT DEFERRABLE;

ALTER TABLE tube_segment
    ADD CONSTRAINT tube_segment_terrain_type_fk FOREIGN KEY ( terrain_type )
        REFERENCES terrain_type ( type )
    NOT DEFERRABLE;

ALTER TABLE tube_segment
    ADD CONSTRAINT tube_segment_tube_type_fk FOREIGN KEY ( tube_type )
        REFERENCES tube_type ( type )
    NOT DEFERRABLE;

ALTER TABLE vacuum_pump
    ADD CONSTRAINT vacuum_pump_element_data_fk FOREIGN KEY ( serial_number,
                                                             producent_id )
        REFERENCES element_data ( serial_number,
                                  producent_id )
    NOT DEFERRABLE;

ALTER TABLE vacuum_pump
    ADD CONSTRAINT vacuum_pump_status_fk FOREIGN KEY ( status )
        REFERENCES status ( status )
    NOT DEFERRABLE;

ALTER TABLE vacuum_pump
    ADD CONSTRAINT vacuum_pump_tube_segment_fk FOREIGN KEY ( tube_segment_id )
        REFERENCES tube_segment ( "TS-ID" )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER Airlock_Status_TR 
    BEFORE INSERT OR UPDATE ON Airlock 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status ) 
BEGIN
CASE
WHEN NEW.STATUS LIKE "Broken" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 0, SYSDATE, CONCAT('Airlock ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "In maintanance" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 3, SYSDATE, CONCAT('Airlock ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Working" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 4, SYSDATE, CONCAT('Airlock ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Decomissioned" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 5, SYSDATE, CONCAT('Airlock ', NEW.ID, ' is now ', NEW.STATUS)
ELSE INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 6, SYSDATE, CONCAT('Airlock ', NEW.ID, ' is now ', NEW.STATUS)
END
END; 
/

CREATE OR REPLACE TRIGGER Battery_Low_TR 
    BEFORE INSERT OR UPDATE ON Battery 
    FOR EACH ROW 
    WHEN ( NEW.Charge<10 ) 
BEGIN
INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 2, SYSDATE, CONCAT('Battery ', NEW.ID, ' is running low on power.')
END; 
/

CREATE OR REPLACE TRIGGER Battery_Status_TR 
    BEFORE INSERT OR UPDATE ON Battery 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status ) 
BEGIN
CASE
WHEN NEW.STATUS LIKE "Broken" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 0, SYSDATE, CONCAT('Battery ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "In maintanance" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 3, SYSDATE, CONCAT('Battery ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Working" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 4, SYSDATE, CONCAT('Battery ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Decomissioned" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 5, SYSDATE, CONCAT('Battery ', NEW.ID, ' is now ', NEW.STATUS)
ELSE INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 6, SYSDATE, CONCAT('Battery ', NEW.ID, ' is now ', NEW.STATUS)
END
END; 
/

CREATE OR REPLACE TRIGGER Damper_Status_TR 
    BEFORE INSERT OR UPDATE ON Damper 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status ) 
BEGIN
CASE
WHEN NEW.STATUS LIKE "Broken" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 0, SYSDATE, CONCAT('Damper ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "In maintanance" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 3, SYSDATE, CONCAT('Damper ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Working" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 4, SYSDATE, CONCAT('Damper ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Decomissioned" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 5, SYSDATE, CONCAT('Damper ', NEW.ID, ' is now ', NEW.STATUS)
ELSE INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 6, SYSDATE, CONCAT('Damper ', NEW.ID, ' is now ', NEW.STATUS)
END
END; 
/

CREATE OR REPLACE TRIGGER Motor_Status_TR 
    BEFORE INSERT OR UPDATE ON Linear_Electric_Motor 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status ) 
BEGIN
CASE
WHEN NEW.STATUS LIKE "Broken" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 0, SYSDATE, CONCAT('Motor ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "In maintanance" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 3, SYSDATE, CONCAT('Motor ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Working" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 4, SYSDATE, CONCAT('Motor ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Decomissioned" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 5, SYSDATE, CONCAT('Motor ', NEW.ID, ' is now ', NEW.STATUS)
ELSE INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 6, SYSDATE, CONCAT('Motor ', NEW.ID, ' is now ', NEW.STATUS)
END
END; 
/

CREATE OR REPLACE TRIGGER Platform_Status_TR 
    BEFORE INSERT OR UPDATE ON Platform 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status ) 
BEGIN
CASE
WHEN NEW.STATUS LIKE "Closed" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 0, SYSDATE, CONCAT('Platform ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Open" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 4, SYSDATE, CONCAT('Platform ', NEW.ID, ' is now ', NEW.STATUS)
ELSE INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 6, SYSDATE, CONCAT('Platform ', NEW.ID, ' is now ', NEW.STATUS)
END
END; 
/

CREATE OR REPLACE TRIGGER Pump_Status_TR 
    BEFORE INSERT OR UPDATE ON Vacuum_Pump 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status ) 
BEGIN
CASE
WHEN NEW.STATUS LIKE "Broken" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 0, SYSDATE, CONCAT('Pump ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "In maintanance" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 3, SYSDATE, CONCAT('Pump ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Working" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 4, SYSDATE, CONCAT('Pump ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Decomissioned" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 5, SYSDATE, CONCAT('Pump ', NEW.ID, ' is now ', NEW.STATUS)
ELSE INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 6, SYSDATE, CONCAT('Pump ', NEW.ID, ' is now ', NEW.STATUS)
END
END; 
/

CREATE OR REPLACE TRIGGER Pylon_status_TR 
    BEFORE INSERT OR UPDATE ON Pylon 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status ) 
BEGIN
CASE
WHEN NEW.STATUS LIKE "Broken" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 0, SYSDATE, CONCAT('Pylon ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "In maintanance" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 3, SYSDATE, CONCAT('Pylon ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Working" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 4, SYSDATE, CONCAT('Pylon ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Decomissioned" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 5, SYSDATE, CONCAT('Pylon ', NEW.ID, ' is now ', NEW.STATUS)
ELSE INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 6, SYSDATE, CONCAT('Pylon ', NEW.ID, ' is now ', NEW.STATUS)
END
END; 
/

CREATE OR REPLACE TRIGGER Route_Status_TR 
    BEFORE INSERT OR UPDATE ON Route_section 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status ) 
BEGIN
CASE
WHEN NEW.STATUS LIKE "Closed" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 0, SYSDATE, CONCAT('Route ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Open" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 4, SYSDATE, CONCAT('Route ', NEW.ID, ' is now ', NEW.STATUS)
ELSE INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 6, SYSDATE, CONCAT('Route ', NEW.ID, ' is now ', NEW.STATUS)
END
END; 
/

CREATE OR REPLACE TRIGGER Solar_Panel_Status_TR 
    BEFORE INSERT OR UPDATE ON Solar_Panel 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status ) 
BEGIN
CASE
WHEN NEW.STATUS LIKE "Broken" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 0, SYSDATE, CONCAT('Solar Panel ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "In maintanance" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 3, SYSDATE, CONCAT('Solar Panel ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Working" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 4, SYSDATE, CONCAT('Solar Panel ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Decomissioned" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 5, SYSDATE, CONCAT('Solar Panel ', NEW.ID, ' is now ', NEW.STATUS)
ELSE INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 6, SYSDATE, CONCAT('Solar Panel ', NEW.ID, ' is now ', NEW.STATUS)
END
END; 
/

CREATE OR REPLACE TRIGGER Station_Close_Platform_TR 
    BEFORE INSERT OR UPDATE ON Airlock 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status and NEW.Status='Closed' ) 
BEGIN
UPDATE PLATFORM SET PLATFORM.STATUS='Closed'
FROM STATION JOIN PLATFORM ON STATION.ID=PLATFORM.STATION_ID;
END; 
/

CREATE OR REPLACE TRIGGER Station_Status_TR 
    BEFORE INSERT OR UPDATE ON Station 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status ) 
BEGIN
CASE
WHEN NEW.STATUS LIKE "Closed" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 0, SYSDATE, CONCAT('Station ', NEW.ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Open" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 4, SYSDATE, CONCAT('Station ', NEW.ID, ' is now ', NEW.STATUS)
ELSE INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 6, SYSDATE, CONCAT('Station ', NEW.ID, ' is now ', NEW.STATUS)
END
END; 
/

CREATE OR REPLACE TRIGGER Tube_Close_Route_TR 
    BEFORE INSERT OR UPDATE ON Tube_Segment 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status and (NEW.Status='Broken' or NEW.Status='Decomissioned' or NEW.Status='In maintanance') ) 
BEGIN
UPDATE ROUTE_SECTION SET ROUTE_SECTION.STATUS='Closed'
FROM (TUBE_SEGMENT JOIN TUBE_ON_ROUTE ON TUBE_SEGMENT.TS-ID=TUBE_ON_ROUTE.TUBE_SEGMENT_ID)
JOIN ROUTE_SECTION ON TUBE_ON_ROUTE.ROUTE_ID=ROUTE_SECTION.ID;
END; 
/

CREATE OR REPLACE TRIGGER Tube_status_TR 
    BEFORE INSERT OR UPDATE ON Tube_Segment 
    FOR EACH ROW 
    WHEN ( NEW.Status!=OLD.Status ) 
BEGIN
CASE
WHEN NEW.STATUS LIKE "Broken" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 0, SYSDATE, CONCAT('Tube ', NEW.TS-ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "In maintanance" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 3, SYSDATE, CONCAT('Tube ', NEW.TS-ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Working" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 4, SYSDATE, CONCAT('Tube ', NEW.TS-ID, ' is now ', NEW.STATUS)
WHEN NEW.STATUS LIKE "Decomissioned" THEN INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 5, SYSDATE, CONCAT('Tube ', NEW.TS-ID, ' is now ', NEW.STATUS)
ELSE INSERT INTO LOGS VALUES (Sq_LOGS.nextval, 6, SYSDATE, CONCAT('Tube ', NEW.TS-ID, ' is now ', NEW.STATUS)
END
END; 
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            20
-- CREATE INDEX                            45
-- ALTER TABLE                             88
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          14
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0

----------------------------------------------------------------------------------------------------------------------------------------------------
-- OTHER STUFF;

CREATE SEQUENCE Sq_LOGS START WITH 0 INCREMENT BY 1;

INSERT INTO STATUS VALUES ('In planning');
INSERT INTO STATUS VALUES ('Open');
INSERT INTO STATUS VALUES ('Closed');

INSERT INTO STATUS VALUES ('Broken');
INSERT INTO STATUS VALUES ('Working');
INSERT INTO STATUS VALUES ('Decomissioned');
INSERT INTO STATUS VALUES ('In maintanance');
INSERT INTO STATUS VALUES ('In production');
INSERT INTO STATUS VALUES ('In transit');

INSERT INTO Measurment_Unit VALUES ('Wh');
INSERT INTO Measurment_Unit VALUES ('kWh');
INSERT INTO Measurment_Unit VALUES ('Ah');
INSERT INTO Measurment_Unit VALUES ('kAh');
INSERT INTO Measurment_Unit VALUES ('W');
INSERT INTO Measurment_Unit VALUES ('kW');
INSERT INTO Measurment_Unit VALUES ('Pa');
INSERT INTO Measurment_Unit VALUES ('hPa');
INSERT INTO Measurment_Unit VALUES ('atm');
INSERT INTO Measurment_Unit VALUES ('torr');
INSERT INTO Measurment_Unit VALUES ('cm');
INSERT INTO Measurment_Unit VALUES ('m');
INSERT INTO Measurment_Unit VALUES ('km');
INSERT INTO Measurment_Unit VALUES ('in');
INSERT INTO Measurment_Unit VALUES ('ft');
INSERT INTO Measurment_Unit VALUES ('yd');
INSERT INTO Measurment_Unit VALUES ('ch');
INSERT INTO Measurment_Unit VALUES ('fur');
INSERT INTO Measurment_Unit VALUES ('mi');
INSERT INTO Measurment_Unit VALUES ('lea');
